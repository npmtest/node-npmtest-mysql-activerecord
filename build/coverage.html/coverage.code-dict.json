{"/home/travis/build/npmtest/node-npmtest-mysql-activerecord/test.js":"/* istanbul instrument in package npmtest_mysql_activerecord */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-activerecord/lib.npmtest_mysql_activerecord.js":"/* istanbul instrument in package npmtest_mysql_activerecord */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mysql_activerecord = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mysql_activerecord = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-activerecord/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mysql-activerecord && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mysql_activerecord */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mysql_activerecord\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mysql_activerecord.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mysql_activerecord.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mysql_activerecord.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mysql_activerecord.__dirname + '/lib.npmtest_mysql_activerecord.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-activerecord/node_modules/mysql-activerecord/index.js":"/**\n * MySQL ActiveRecord Adapter for Node.js\n * (C) Martin Tajur 2011-2014\n * martin@tajur.ee\n * \n * Active Record Database Pattern implementation for use with node-mysql as MySQL connection driver.\n * \n * Dual licensed under the MIT and GPL licenses.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n * \n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL KEVIN VAN ZONNEVELD BE LIABLE FOR ANY CLAIM, DAMAGES\n * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n * \n**/ \n\nvar Adapter = function(settings) {\n\n\tvar mysql = require('mysql');\n\n\tvar initializeConnectionSettings = function () {\n\t\tif(settings.server) {\n\t\t\tsettings.host = settings.server;\n\t\t}\n\t\tif(settings.username) {\n\t\t\tsettings.user = settings.username;\n\t\t}\n\n\t\tif (!settings.host) {\n\t\t\tthrow new Error('Unable to start mysql-activerecord - no server given.');\n\t\t}\n\t\tif (!settings.port) {\n\t\t\tsettings.port = 3306;\n\t\t}\n\t\tif (!settings.user) {\n\t\t\tsettings.user = '';\n\t\t}\n\t\tif (!settings.password) {\n\t\t\tsettings.password = '';\n\t\t}\n\t\tif (!settings.database) {\n\t\t\tthrow new Error('Unable to start mysql-activerecord - no database given.');\n\t\t}\n\n\t\treturn settings;\n\t};\n\n\tvar connection;\n\tvar connectionSettings;\n\tvar pool;\n\n\tif (settings && settings.pool) {\n\t\tpool = settings.pool.pool;\n\t\tconnection = settings.pool.connection;\n\t} else {\n\t\tconnectionSettings = initializeConnectionSettings();\n\t\tconnection = new mysql.createConnection(connectionSettings);\n\t}\n\n\tif (settings.charset) {\n\t\tconnection.query('SET NAMES ' + settings.charset);\n\t}\n\n\tvar whereClause = {},\n\t\tselectClause = [],\n\t\torderByClause = '',\n\t\tgroupByClause = '',\n\t\thavingClause = '',\n\t\tlimitClause = -1,\n\t\toffsetClause = -1,\n\t\tjoinClause = [],\n\t\tlastQuery = '';\n\t\n\tvar resetQuery = function(newLastQuery) {\n\t\twhereClause = {};\n\t\tselectClause = [];\n\t\torderByClause = '';\n\t\tgroupByClause = '';\n\t\thavingClause = '',\n\t\tlimitClause = -1;\n\t\toffsetClause = -1;\n\t\tjoinClause = [];\n\t\tlastQuery = (typeof newLastQuery === 'string' ? newLastQuery : '');\n\t\trawWhereClause = {};\n\t\trawWhereString = {};\n\t};\n\t\n\tvar rawWhereClause = {};\n\tvar rawWhereString = {};\n\t\n\tvar escapeFieldName = function(str) {\n\t\treturn (typeof rawWhereString[str] === 'undefined' && typeof rawWhereClause[str] === 'undefined' ? '`' + str.replace('.','`.`') + '`' : str);\n\t};\n\t\n\tvar buildDataString = function(dataSet, separator, clause) {\n\t\tif (!clause) {\n\t\t\tclause = 'WHERE';\n\t\t}\n\t\tvar queryString = '', y = 1;\n\t\tif (!separator) {\n\t\t\tseparator = ', ';\n\t\t}\n\t\tvar useSeparator = true;\n\t\t\n\t\tvar datasetSize = getObjectSize(dataSet);\n\t\t\n\t\tfor (var key in dataSet) {\n\t\t\tuseSeparator = true;\n\t\t\t\n\t\t\tif (dataSet.hasOwnProperty(key)) {\n\t\t\t\tif (clause == 'WHERE' && rawWhereString[key] == true) {\n\t\t\t\t\tqueryString += key;\n\t\t\t\t}\n\t\t\t\telse if (dataSet[key] === null) {\n\t\t\t\t\tqueryString += escapeFieldName(key) + (clause == 'WHERE' ? \" is NULL\" : \"=NULL\");\n\t\t\t\t}\n\t\t\t\telse if (typeof dataSet[key] !== 'object') {\n\t\t\t\t\tqueryString += escapeFieldName(key) + \"=\" + connection.escape(dataSet[key]);\n\t\t\t\t}\n\t\t\t\telse if (typeof dataSet[key] === 'object' && Object.prototype.toString.call(dataSet[key]) === '[object Array]' && dataSet[key].length > 0) {\n\t\t\t\t\tqueryString += escapeFieldName(key) + ' in (\"' + dataSet[key].join('\", \"') + '\")';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuseSeparator = false;\n\t\t\t\t\tdatasetSize = datasetSize - 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (y < datasetSize && useSeparator) {\n\t\t\t\t\tqueryString += separator;\n\t\t\t\t\ty++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (getObjectSize(dataSet) > 0) {\n\t\t\tqueryString = ' ' + clause + ' ' + queryString;\n\t\t}\n\t\treturn queryString;\n\t};\n\n\tvar buildJoinString = function() {\n\t\tvar joinString = '';\n\n\t\tfor (var i = 0; i < joinClause.length; i++) {\n\t\t\tjoinString += (joinClause[i].direction !== '' ? ' ' + joinClause[i].direction : '') + ' JOIN ' + escapeFieldName(joinClause[i].table) + ' ON ' + joinClause[i].relation;\n\t\t}\n\n\t\treturn joinString;\n\t};\n\n\tvar mergeObjects = function() {\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\tfor (var key in arguments[i]) {\n\t\t\t\tif (arguments[i].hasOwnProperty(key)) {\n\t\t\t\t\targuments[0][key] = arguments[i][key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn arguments[0];\n\t};\n\n\tvar getObjectSize = function(object) {\n\t\tvar size = 0;\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tsize++;\n\t\t\t}\n\t\t}\n\t\treturn size;\n\t};\n\n\tvar trim = function (s) {\n\t\tvar l = 0, r = s.length - 1;\n\t\twhile (l < s.length && s[l] == ' ') {\n\t\t\tl++;\n\t\t}\n\t\twhile (r > l && s[r] == ' ') {\n\t\t\tr-=1;\n\t\t}\n\t\treturn s.substring(l, r + 1);\n\t};\n\n\tthis.connectionSettings = function() { return connectionSettings; };\n\tthis.connection = function() { return connection; };\n\n\tthis.where = function(whereSet, whereValue, isRaw) {\n\t\tif (typeof whereSet === 'object' && typeof whereValue === 'undefined') {\n\t\t\twhereClause = mergeObjects(whereClause, whereSet);\n\t\t}\n\t\telse if ((typeof whereSet === 'string' || typeof whereSet === 'number') && typeof whereValue != 'undefined') {\n\t\t\tif (isRaw) {\n\t\t\t\trawWhereClause[whereSet] = true;\n\t\t\t}\n\t\t\twhereClause[whereSet] = whereValue;\n\t\t}\n\t\telse if ((typeof whereSet === 'string' || typeof whereSet === 'number') && typeof whereValue === 'object' && Object.prototype.toString.call(whereValue) === '[object Array]' && whereValue.length > 0) {\n\t\t\twhereClause[whereSet] = whereValue;\n\t\t}\n\t\telse if (typeof whereSet === 'string' && typeof whereValue === 'undefined') {\n\t\t\trawWhereString[whereSet] = true;\n\t\t\twhereClause[whereSet] = whereValue;\n\t\t}\n\t\treturn that;\n\t};\n\n\tthis.count = function(tableName, responseCallback) {\n\t\tif (typeof tableName === 'string') {\n\t\t\tvar combinedQueryString = 'SELECT COUNT(*) as count FROM ' + escapeFieldName(tableName)\n\t\t\t+ buildJoinString()\n\t\t\t+ buildDataString(whereClause, ' AND ', 'WHERE');\n\n\t\t\tconnection.query(combinedQueryString, function(err, res) { \n\t\t\t\tif (err)\n\t\t\t\t\tresponseCallback(err, null);\n\t\t\t\telse\n\t\t\t\t\tresponseCallback(null, res[0]['count']);\n\t\t\t});\n\t\t\tresetQuery(combinedQueryString);\n\t\t}\n\n\t\treturn that;\n\t};\n\n\tthis.join = function(tableName, relation, direction) {\n\t\tjoinClause.push({\n\t\t\ttable: tableName,\n\t\t\trelation: relation,\n\t\t\tdirection: (typeof direction === 'string' ? trim(direction.toUpperCase()) : '')\n\t\t});\n\t\treturn that;\n\t};\n\n\tthis.select = function(selectSet) {\n\t\tif (Object.prototype.toString.call(selectSet) === '[object Array]') {\n\t\t\tfor (var i = 0; i < selectSet.length; i++) {\n\t\t\t\tselectClause.push(selectSet[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (typeof selectSet === 'string') {\n\t\t\t\tvar selectSetItems = selectSet.split(',');\n\t\t\t\tfor (var i = 0; i < selectSetItems.length; i++) {\n\t\t\t\t\tselectClause.push(trim(selectSetItems[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn that;\n\t};\n\n\tthis.comma_separated_arguments = function(set) {\n\t\tvar clause = '';\n\t\tif (Object.prototype.toString.call(set) === '[object Array]') {\n\t\t\tclause = set.join(', ');\n\t\t}\n\t\telse if (typeof set === 'string') {\n\t\t\tclause = set;\n\t\t}\n\t\treturn clause;\n\t};\n\n\tthis.group_by = function(set) {\n\t\tgroupByClause = this.comma_separated_arguments(set);\n\t\treturn that;\n\t};\n\n\tthis.having = function(set) {\n\t\thavingClause = this.comma_separated_arguments(set);\n\t\treturn that;\n\t};\n\n\tthis.order_by = function(set) {\n\t\torderByClause = this.comma_separated_arguments(set);\n\t\treturn that;\n\t};\n\t\n\tthis.limit = function(newLimit, newOffset) {\n\t\tif (typeof newLimit === 'number') {\n\t\t\tlimitClause = newLimit;\n\t\t}\n\t\tif (typeof newOffset === 'number') {\n\t\t\toffsetClause = newOffset;\n\t\t}\n\t\treturn that;\n\t};\n\n\tthis.ping = function() {\n\t\tconnection.ping();\n\t\treturn that;\n\t};\n\t\n\tthis.insert = function(tableName, dataSet, responseCallback, verb, querySuffix) {\n\t\tif (typeof verb === 'undefined') {\n\t\t\tvar verb = 'INSERT';\n\t\t}\n\t\tif (Object.prototype.toString.call(dataSet) !== '[object Array]') {\n\t\t\tif (typeof querySuffix === 'undefined') {\n\t\t\t\tvar querySuffix = '';\n\t\t\t}\n\t\t\telse if (typeof querySuffix !== 'string') {\n\t\t\t\tvar querySuffix = '';\n\t\t\t}\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tvar combinedQueryString = verb + ' into ' + escapeFieldName(tableName)\n\t\t\t\t+ buildDataString(dataSet, ', ', 'SET');\n\n\t\t\t\tif (querySuffix != '') {\n\t\t\t\t\tcombinedQueryString = combinedQueryString + ' ' + querySuffix;\n\t\t\t\t}\n\n\t\t\t\tconnection.query(combinedQueryString, responseCallback);\n\t\t\t\tresetQuery(combinedQueryString);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdoBatchInsert(verb, tableName, dataSet, responseCallback);\n\t\t}\n\t\treturn that;\n\t};\n\n\tthis.insert_ignore = function(tableName, dataSet, responseCallback, querySuffix) {\n\t\treturn this.insert(tableName, dataSet, responseCallback, 'INSERT IGNORE', querySuffix);\n\t};\n\n\tvar doBatchInsert = function(verb, tableName, dataSet, responseCallback) {\n\t\tif (Object.prototype.toString.call(dataSet) !== '[object Array]') {\n\t\t\tthrow new Error('Array of objects must be provided for batch insert!');\n\t\t}\n\n\t\tif (dataSet.length === 0) return false;\n\n\t\tvar map = [];\n\t\tvar columns = [];\n\t\tvar escColumns = [];\n\n\t\tfor (var aSet in dataSet) {\n\t\t\tfor (var key in dataSet[aSet]) {\n\t\t\t\tif (columns.indexOf(key) == -1) {\n\t\t\t\t\tcolumns.push(key);\n\t\t\t\t\tescColumns.push(escapeFieldName(key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i < dataSet.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tvar row = [];\n\n\t\t\t\tfor (var key in columns) {\n\t\t\t\t\tif (dataSet[i].hasOwnProperty(columns[key])) {\n\t\t\t\t\t\trow.push(that.escape(dataSet[i][columns[key]]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow.push('NULL');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (row.length != columns.length) {\n\t\t\t\t\tthrow new Error('Cannot use batch insert into ' + tableName + ' - fields must match on all rows (' + row.join(',') + ' vs ' + columns.join(',') + ').');\n\t\t\t\t}\n\t\t\t\tmap.push('(' + row.join(',') + ')');\n\t\t\t})(i);\n\t\t}\n\n\t\tthat.query(verb + ' INTO ' + escapeFieldName(tableName) + ' (' + escColumns.join(', ') + ') VALUES' + map.join(','), responseCallback);\n\t\treturn that;\n\t};\n\n\tthis.get = function(tableName, responseCallback) {\n\t\tif (typeof tableName === 'string') {\n\t\t\tvar combinedQueryString = 'SELECT ' + (selectClause.length === 0 ? '*' : selectClause.join(','))\n\t\t\t+ ' FROM ' + escapeFieldName(tableName)\n\t\t\t+ buildJoinString()\n\t\t\t+ buildDataString(whereClause, ' AND ', 'WHERE')\n\t\t\t+ (groupByClause !== '' ? ' GROUP BY ' + groupByClause : '')\n\t\t\t+ (havingClause !== '' ? ' HAVING ' + havingClause : '')\n\t\t\t+ (orderByClause !== '' ? ' ORDER BY ' + orderByClause : '')\n\t\t\t+ (limitClause !== -1 ? ' LIMIT ' + limitClause : '')\n\t\t\t+ (offsetClause !== -1 ? ' OFFSET ' + offsetClause : '');\n\n\t\t\tconnection.query(combinedQueryString, responseCallback);\n\t\t\tresetQuery(combinedQueryString);\n\t\t}\n\t\t\n\t\treturn that;\n\t};\n\t\n\tthis.update = function(tableName, newData, responseCallback) {\n\t\tif (typeof tableName === 'string') {\n\t\t\tvar combinedQueryString = 'UPDATE ' + escapeFieldName(tableName)\n\t\t\t+ buildDataString(newData, ', ', 'SET')\n\t\t\t+ buildDataString(whereClause, ' AND ', 'WHERE')\n\t\t\t+ (limitClause !== -1 ? ' LIMIT ' + limitClause : '');\n\n\t\t\tconnection.query(combinedQueryString, responseCallback);\n\t\t\tresetQuery(combinedQueryString);\n\t\t}\n\t\t\n\t\treturn that;\n\t};\n\n\tthis.escape = function(str) {\n\t\treturn connection.escape(str);\n\t};\n\n\tthis.delete = function(tableName, responseCallback) {\n\t\tif (typeof tableName === 'string') {\n\t\t\tvar combinedQueryString = 'DELETE FROM ' + escapeFieldName(tableName)\n\t\t\t+ buildDataString(whereClause, ' AND ', 'WHERE')\n\t\t\t+ (limitClause !== -1 ? ' LIMIT ' + limitClause : '');\n\n\t\t\tconnection.query(combinedQueryString, responseCallback);\n\t\t\tresetQuery(combinedQueryString);\n\t\t}\n\n\t\treturn that;\n\t};\n\n\tthis._last_query = function() {\n\t\treturn lastQuery;\n\t};\n\n\tthis.query = function(sqlQueryString, responseCallback) {\n\t\tconnection.query(sqlQueryString, responseCallback);\n\t\tresetQuery(sqlQueryString);\n\t\treturn that;\n\t};\n\n\tthis.disconnect = function() {\n\t\treturn connection.end();\n\t};\n\n\tthis.forceDisconnect = function() {\n\t\treturn connection.destroy();\n\t};\n\t\n\tthis.releaseConnection = function() {\n\t\tpool.releaseConnection(connection);\n\t};\n\n\tthis.releaseConnection = function() {\n\t\tpool.releaseConnection(connection);\n\t};\n\n\tvar reconnectingTimeout = false;\n\n\tfunction handleDisconnect(connectionInstance) {\n\t\tconnectionInstance.on('error', function(err) {\n\t\t\tif (!err.fatal || reconnectingTimeout) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (err.code !== 'PROTOCOL_CONNECTION_LOST' && err.code !== 'ECONNREFUSED') {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tif (settings.reconnectTimeout === false) return;\n\n\t\t\tvar reconnectingTimeout = setTimeout(function() {\n\t\t\t\tconnection = mysql.createConnection(connectionInstance.config);\n\t\t\t\thandleDisconnect(connection);\n\t\t\t\tconnection.connect();\n\t\t\t}, settings.reconnectTimeout || 2000);\n\t\t});\n\t}\n\n\tif (!pool) {\n\t\thandleDisconnect(connection);\n\t}\n\n\tvar that = this;\n\t\n\treturn this;\n};\n\nvar mysqlPool; // this should be initialized only once.\nvar mysqlCharset;\n\nvar Pool = function (settings) {\n\tif (!mysqlPool) {\n\t\tvar mysql = require('mysql');\n\n\t\tvar poolOption = {\n\t\t\tcreateConnection: settings.createConnection,\n\t\t\twaitForConnections: settings.waitForConnections,\n\t\t\tconnectionLimit: settings.connectionLimit,\n\t\t\tqueueLimit: settings.queueLimit\n\t\t};\n\t\tObject.keys(poolOption).forEach(function (element) {\n\t\t\t// Avoid pool option being used by mysql connection.\n\t\t\tdelete settings[element];\n\t\t\t// Also remove undefined elements from poolOption\n\t\t\tif (!poolOption[element]) {\n\t\t\t\tdelete poolOption[element];\n\t\t\t}\n\t\t});\n\n\t\t// Confirm settings with Adapter.\n\t\tvar db = new Adapter(settings);\n\t\tvar connectionSettings = db.connectionSettings();\n\n\t\tObject.keys(connectionSettings).forEach(function (element) {\n\t\t\tpoolOption[element] = connectionSettings[element];\n\t\t});\n\n\t\tmysqlPool = mysql.createPool(poolOption);\n\t\tmysqlCharset = settings.charset;\n\t}\n\n\tthis.pool = function () {\n\t\treturn mysqlPool;\n\t};\n\n\tthis.getNewAdapter = function (responseCallback) {\n\t\tmysqlPool.getConnection(function (err, connection) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tvar adapter = new Adapter({\n\t\t\t\tpool: {\n\t\t\t\t\tpool: mysqlPool,\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tconnection: connection\n\t\t\t\t},\n\t\t\t\tcharset: mysqlCharset\n\t\t\t});\n\t\t\tresponseCallback(adapter);\n\t\t});\n\t};\n\n\tthis.disconnect = function (responseCallback) {\n\t\tthis.pool().end(responseCallback);\n\t};\n\n\treturn this;\n};\n\nexports.Adapter = Adapter;\nexports.Pool = Pool;\n"}